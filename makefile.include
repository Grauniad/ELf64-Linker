# makefile tools library  for bulding multi-directory projects
#
# Luke Humphreys 2012

#Define the base directories
LINKER_DIR=$(HOME)/Linker/
EXPORTS_DIR=$(LINKER_DIR)exports/
TEST_DIR=$(LINKER_DIR)Tests/


# Define the internal file structure
EXPORT_TESTS_TO=$(TEST_DIR)tests/
EXPORT_INCLUDES_DIR=$(EXPORTS_DIR)includes/
EXPORT_OBJS_DIR=$(EXPORTS_DIR)objs/
EXPORT_LIB_DIR=$(EXPORTS_DIR)lib/


#
#  CONFIGURE COMPILER
#

# Compilation variables
#
ADDITIONAL_INCLUDE_FLAGS=
DEBUG_FLAGS=-ggdb
CPPSTD=gnu++98 #(overridden by USE_CPPXX)

# Set to YES to enable
DEBUG_ON=YES
USE_CPP11=YES

# Build up cpp flags
# 
# These should be configured above
# DO NOT CHANGE THESE UNLESS YOU KNOW WHAT YOU ARE DOING
INCLUDE_FLAGS=-I$(EXPORT_INCLUDES_DIR)
INCLUDE_FLAGS+=$(ADDITIONAL_INCLUDE_FLAGS)

CPP_FLAGS=$(INCLUDE_FLAGS)

ifeq ($(DEBUG_ON),YES)
  CPP_FLAGS+=$(DEBUG_FLAGS)
endif

ifeq ($(USE_CPP11),YES)
  CPPSTD=c++0x
endif

CPP_FLAGS+=-std=$(CPPSTD)

# calculate variables used for macros 
# DO NOT CHANGE THESE UNLESS YOU KNOW WHAT YOU ARE DOING
BUILD_DEPS=BUILD_FOLDERS
TO_CLEAN=FOLDERS_TO_CLEAN FILES_TO_CLEAN
TO_BUILD=
FILES_TO_CLEAN=
FOLDERS_TO_CLEAN=
LINKED_FILES=

ifdef SOURCES
   TO_BUILD+=$(addprefix $(EXPORT_OBJS_DIR),$(addsuffix .o,$(SOURCES)))
   FILES_TO_CLEAN+=$(TO_BUILD)
endif

ifdef  EXPORT_INCLUDES
   EXPORTED_INCLUDES=$(addprefix $(EXPORT_INCLUDES_DIR),$(EXPORT_INCLUDES))
   BUILD_DEPS+=$(EXPORTED_INCLUDES)
   FILES_TO_CLEAN+=$(EXPORTED_INCLUDES)
endif

ifdef MAKE_DIRS
   FOLDERS_TO_BUILD=$(MAKE_DIRS)
   FOLDERS_TO_CLEAN=$(MAKE_DIRS)
endif

ifdef TARGET_LIB
   LIB_TO_BUILD=$(addsuffix .a,$(EXPORT_LIB_DIR)$(TARGET_LIB))
   BUILD_DEPS+=$(LIB_TO_BUILD)
   FILES_TO_CLEAN+=$(LIB_TO_BUILD)
endif

ifdef EXECUTABLE   
   BUILD_DEPS+=EXEC
   EXEC_TO_BUILD=$(LINKER_DIR)$(EXECUTABLE)
   FILES_TO_CLEAN+=$(EXEC_TO_BUILD)
endif

ifdef BUILD_TIME_TESTS
   BUILD_DEPS+=RUN_AUTO_TEST
   TESTS_TO_BUILD=$(addprefix $(EXPORT_TESTS_TO),$(BUILD_TIME_TESTS))
   TESTS_TO_RUN=$(TESTS_TO_BUILD)
   FILES_TO_CLEAN+=$(TESTS_TO_BUILD)
endif

ifdef LINKED_LIBS
   LINKED_FILES+=$(addprefix $(EXPORT_LIB_DIR),$(addsuffix .a,$(LINKED_LIBS)))
endif

ifeq ($(strip $(FILES_TO_CLEAN)),)
    CLEAN_CMD=@echo "nothing to clean"
else
    CLEAN_CMD=rm $(FILES_TO_CLEAN)
endif


all: $(BUILD_DEPS)

clean: FOLDERS_TO_CLEAN 
	$(CLEAN_CMD)

EXEC: $(TO_BUILD) $(LINKED_FILES)
	g++ $(CPP_FLAGS) -o $(EXEC_TO_BUILD) $(TO_BUILD) $(LINKED_FILES)

FOLDERS_TO_CLEAN:
	@for dir in $(FOLDERS_TO_BUILD); do  \
		$(MAKE) -C $$dir clean;         \
		echo "***********************************************************"; \
		echo "Cleaned: $$dir ";\
		echo "************************************************************"; \
	done                                 
 
# Macro for building subfolders
BUILD_FOLDERS :
	@for dir in $(FOLDERS_TO_BUILD); do  \
		$(MAKE) -C $$dir || exit;        \
		echo "***********************************************************"; \
		echo "Built successfully: $$dir ";\
		echo "************************************************************"; \
	done

RUN_AUTO_TEST: BUILD_AUTO_TESTS
	@for test in $(TESTS_TO_RUN); do \
		echo "***********************************************************"; \
		echo "Running auto test: $$test";\
		$$test || exit;\
		echo "************************************************************"; \
	done

BUILD_AUTO_TESTS: $(TESTS_TO_BUILD)

$(EXPORT_TESTS_TO)%: %.cpp $(LINKED_FILES)
	g++ $(CPP_FLAGS) -o $@ $+ $(LINKED_FILES)

# Macro for building STATIC libraries
$(LIB_TO_BUILD): $(TO_BUILD)
	ar -cr 	$@ 	$+

# Macro for moving include files to the includes directory. 
$(EXPORT_INCLUDES_DIR)%: %
	cp $+ $@

# Macro for building object files
$(EXPORT_OBJS_DIR)%.o: %
	g++  $(CPP_FLAGS) -c -o $@ $+

