# makefile tools library  for bulding multi-directory projects
#
# Luke Humphreys 2012

#Define the base directories
ifndef LINKER_DIR
   LINKER_DIR=$(HOME)/Linker/
endif
EXPORTS_DIR=$(LINKER_DIR)exports/
TEST_DIR=$(LINKER_DIR)Tests/
SCRIPTS_DIR=$(LINKER_DIR)Scripts/

# Define the internal file structure
EXPORT_TESTS_TO=$(TEST_DIR)tests/
EXPORT_INCLUDES_DIR=$(EXPORTS_DIR)includes/
EXPORT_OBJS_DIR=$(EXPORTS_DIR)objs/
EXPORT_LIB_DIR=$(EXPORTS_DIR)lib/
EXPORT_PROFILE_DIR=$(EXPORTS_DIR)profs/
ifndef TAGS_DIR
    EXPORT_TAGS_DIR=$(EXPORTS_DIR)tags/
else
    EXPORT_TAGS_DIR=$(TAGS_DIR)
endif


#
#  CONFIGURE COMPILER
#

# Compilation variables
#
ADDITIONAL_INCLUDE_FLAGS=
DEBUG_FLAGS=-ggdb
CPPSTD=gnu++98 #(overridden by USE_CPPXX)

# Set to YES to enable
ifndef DEBUG_ON
    DEBUG_ON=YES
endif

# If yes, build will if any warnings are raised
ifndef FATAL_WARNINGS
   FATAL_WARNINGS=YES
endif

# This project requires the C++11 standard
USE_CPP11=YES

#
#  CONFIGURE TAGS
#
ifndef CTAGS
    CTAGS=ctags
endif
CPP_TAGS_FLAGS=-R --sort=1 --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ --tag-relative=no


#
# Configure Debuggers
#

ifndef VALGRIND_OPTIONS
    VALGRIND_OPTIONS=--leak-check=full
    # Report the source of unintialised errors
    VALGRIND_OPTIONS+=--track-origins=yes
    # RAM is cheap
    VALGRIND_OPTIONS+=--freelist-vol=2000000000
    # Should run silently for regression tests, only report errors
    VALGRIND_OPTIONS+=--quiet
    # Fail the build if an error is found
    VALGRIND_OPTIONS+=--error-exitcode=1
    # Report any file handles that haven't been cleaned up
    VALGRIND_OPTIONS+=--track-fds=yes
    # Using a (vim!) wrapper that allows us to easily handle large call stacks
    VALGRIND_OPTIONS+=--num-callers=50
    # For easy debugging
    VALGRIND_OPTIONS+=--fullpath-after=
endif

ifndef GDB_OPTIONS
   # Use terminal user interface (display source code)
   GDB_OPTIONS=-tui 
   # Source the command file in the root directory 
   #  - define break points here
   #  - defines the code that auto-starts and cleans up the test
   GDB_OPTIONS+=-x $(LINKER_DIR)/.gdb_breakpoints 
   GDB_OPTIONS+=-x $(LINKER_DIR)/.gdb_setup 
   # We want the test return code to test success
   GDB_OPTIONS+=-return-child-result
endif

#
# Build up cpp flags
# 
# These should be configured above
# DO NOT CHANGE THESE UNLESS YOU KNOW WHAT YOU ARE DOING
INCLUDE_FLAGS=-I$(EXPORT_INCLUDES_DIR)
INCLUDE_FLAGS+=$(ADDITIONAL_INCLUDE_FLAGS)

# Make the defer header available for use in test scripts
TEST_CPP_FLAGS=-I$(LINKER_DIR)Libraries/libDefer/

ifdef CPP_FLAGS
    CPP_FLAGS+=$(INCLUDE_FLAGS)
else
    CPP_FLAGS=$(INCLUDE_FLAGS)
endif


ifeq ($(findstring profile,$(MAKECMDGOALS)),profile)
   CPP_FLAGS+=-pg -D__PROFILE__TESTS -O2 -march=native
   DEBUG_ON=FALSE
endif

ifeq ($(FATAL_WARNINGS),YES)
  CPP_FLAGS+=-Werror
endif

ifeq ($(DEBUG_ON),YES)
  CPP_FLAGS+=$(DEBUG_FLAGS)
endif

ifeq ($(USE_CPP11),YES)
  CPPSTD=c++0x
endif

ifeq ($(findstring cover,$(MAKECMDGOALS)),cover)
   CPP_FLAGS+=--coverage
endif


CPP_FLAGS+=-std=$(CPPSTD)

# calculate variables used for macros 
# DO NOT CHANGE THESE UNLESS YOU KNOW WHAT YOU ARE DOING
BUILD_DEPS=BUILD_FOLDERS
TO_CLEAN=FOLDERS_TO_CLEAN FILES_TO_CLEAN
TO_BUILD=
FILES_TO_CLEAN=
FOLDERS_TO_CLEAN=
LINKED_FILES=
CPP_TAGS_TO_BUILD=


ifdef SOURCES
   $(shell mkdir -p $(EXPORT_OBJS_DIR))
   TO_BUILD+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%.cpp=%.o))
   FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%.cpp=%.gcno))
   FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%.cpp=%.gcda))
   FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%.cpp=%.o))
   FILES_TO_CLEAN+=$(shell rm *.gcov)
endif

ifdef EXPORT_INCLUDES
   $(shell mkdir -p $(EXPORT_INCLUDES_DIR))
   EXPORTED_INCLUDES=$(addprefix $(EXPORT_INCLUDES_DIR),$(EXPORT_INCLUDES))
   BUILD_DEPS+=$(EXPORTED_INCLUDES)
   FILES_TO_CLEAN+=$(EXPORTED_INCLUDES)
endif

ifdef MAKE_DIRS
   FOLDERS_TO_BUILD=$(MAKE_DIRS)
   FOLDERS_TO_CLEAN=$(MAKE_DIRS)
endif

ifdef TARGET_LIB
   $(shell mkdir -p $(EXPORT_LIB_DIR))
   LIB_TO_BUILD=$(addsuffix .a,$(EXPORT_LIB_DIR)$(TARGET_LIB))
   BUILD_DEPS+=$(LIB_TO_BUILD)
   FILES_TO_CLEAN+=$(LIB_TO_BUILD)
endif

ifdef EXECUTABLE   
   BUILD_DEPS+=EXEC
   EXEC_TO_BUILD=$(LINKER_DIR)$(EXECUTABLE)
   FILES_TO_CLEAN+=$(EXEC_TO_BUILD)
endif

ifdef BUILD_TIME_TESTS
   $(shell mkdir -p $(EXPORT_TESTS_TO))
   testCmd=RUN_AUTO_TEST
   ifeq ($(findstring memtest,$(MAKECMDGOALS)),memtest)
	   testCmd=VALGRIND_AUTO_TESTS
   endif
   ifeq ($(findstring gdbtest,$(MAKECMDGOALS)),gdbtest)
	   testCmd=GDB_AUTO_TESTS
   endif
   ifeq ($(findstring profile,$(MAKECMDGOALS)),profile)
     $(shell mkdir -p $(EXPORT_PROFILE_DIR))
     testCmd=BUILD_PROFILE_PAGE
   endif
   BUILD_DEPS+=$(testCmd)
   TESTS_TO_BUILD=$(addprefix $(EXPORT_TESTS_TO),$(BUILD_TIME_TESTS))
   TESTS_TO_RUN=$(TESTS_TO_BUILD)
   FILES_TO_CLEAN+=$(TESTS_TO_BUILD)
   FILES_TO_CLEAN+=$(shell rm *.gcda)
   FILES_TO_CLEAN+=$(shell rm *.gcno)
endif

ifdef LINKED_LIBS
   LINKED_FILES+=$(addprefix $(EXPORT_LIB_DIR),$(addsuffix .a,$(LINKED_LIBS)))
endif

ifdef CPP_TAGS_FILE
   $(shell mkdir -p $(EXPORT_TAGS_DIR))
   CPP_TAGS_TO_BUILD=$(EXPORT_TAGS_DIR)$(CPP_TAGS_FILE)
   BUILD_DEPS+=$(CPP_TAGS_TO_BUILD)
endif

ifeq ($(strip $(FILES_TO_CLEAN)),)
    CLEAN_CMD=@echo "nothing to clean"
else
    CLEAN_CMD=rm $(FILES_TO_CLEAN)
endif


all: $(BUILD_DEPS)
memtest: all
gdbtest: all
cover:
profile: all
coverview: BUILD_FOLDERS VIEW_COVERAGE

profileview:
	firefox $(EXPORT_PROFILE_DIR)index.html

clean: FOLDERS_TO_CLEAN 
	$(CLEAN_CMD)

EXEC: $(TO_BUILD) $(LINKED_FILES)
	g++ $(CPP_FLAGS) -o $(EXEC_TO_BUILD) $(TO_BUILD) $(LINKED_FILES)

VIEW_COVERAGE:
	@if [ "$(SOURCES)" != "" ]; \
	then for f in $(SOURCES); do \
		gcov -f -o $(EXPORT_OBJS_DIR) $$f | c++filt;\
	done;\
	fi

FOLDERS_TO_CLEAN:
	@for dir in $(FOLDERS_TO_BUILD); do  \
		$(MAKE) -C $$dir clean;         \
		echo "***********************************************************"; \
		echo "Cleaned: $$dir ";\
		echo "************************************************************"; \
	done                                 
 
# Macro for building subfolders
BUILD_FOLDERS :
	@for dir in $(FOLDERS_TO_BUILD); do  \
		$(MAKE) -C $$dir $(MAKECMDGOALS) || exit;        \
		echo "***********************************************************"; \
		echo "Built successfully: $$dir ";\
		echo "************************************************************"; \
	done

RUN_AUTO_TEST: BUILD_AUTO_TESTS
	@for test in $(TESTS_TO_RUN); do \
		echo "***********************************************************"; \
		echo "Running auto test: $$test";\
		$$test || exit;\
		echo "************************************************************"; \
	done

VALGRIND_AUTO_TESTS: BUILD_AUTO_TESTS
	@for test in $(TESTS_TO_RUN); do \
		echo "***********************************************************"; \
		echo "Running auto test: $$test";\
		    valgrind $(VALGRIND_OPTIONS) $$test || exit;\
		echo "************************************************************"; \
	done

GDB_AUTO_TESTS: BUILD_AUTO_TESTS
	@echo "***********************************************************"; \
	echo "           Running auto tests under gdb                    "; \
        echo " Setup File:  $(LINKER_DIR)/.gdb_setup"; \
	echo "***********************************************************"; \
	for test in $(TESTS_TO_RUN); do \
		passed=1;\
		echo -n "$$(basename $$test)";\
		gdb $(GDB_OPTIONS) $$test || passed=0; \
		if [ $$passed -eq 1 ]; then \
			echo "$$(basename $$test) - PASSED"; \
		else \
			echo "$$(basename $$test) - FAILED"; \
	                echo "***********************************************************"; \
			exit 1;\
		fi \
	done; \
	echo "***********************************************************"; \

PROFILE_TESTS: BUILD_AUTO_TESTS
	@for test in $(TESTS_TO_RUN); do\
		echo "***********************************************************"; \
		echo "Running auto test: $$test";\
		     $$test || exit;\
		echo "Profiling: $$test";\
		     gprof $$test > $(EXPORT_PROFILE_DIR)/$$(basename $$test).profile  || exit;\
		echo "Generating profile html";\
		     $(SCRIPTS_DIR)/prof2html.py $(EXPORT_PROFILE_DIR)/$$(basename $$test).profile || exit;\
		echo "************************************************************"; \
		rm gmon.out; \
	done

BUILD_PROFILE_PAGE: PROFILE_TESTS
	@echo "<html> <body><h1> Test Profiles </h1>" > $(EXPORT_PROFILE_DIR)index.html;\
	echo "<ul>" >> $(EXPORT_PROFILE_DIR)index.html;\
	for f in $$(ls $(EXPORT_PROFILE_DIR)*.html); do\
		echo "<li> <a href=\"$$f\"> $$(basename $$f .profile.html) </a> </li>" >> $(EXPORT_PROFILE_DIR)index.html;\
	done;\
	echo "</ul></body></html>" >> $(EXPORT_PROFILE_DIR)index.html

BUILD_AUTO_TESTS: $(TESTS_TO_BUILD)

$(EXPORT_TESTS_TO)%: %.cpp $(LINKED_FILES)
	g++ $(CPP_FLAGS) $(TEST_CPP_FLAGS) -o $@ $+ $(LINKED_FILES)

# Macro for building STATIC libraries
$(LIB_TO_BUILD): $(TO_BUILD)
	ar -cr 	$@ 	$+

# Macro for moving include files to the includes directory. 
$(EXPORT_INCLUDES_DIR)%: %
	cp $+ $@

# Macro for building object files
$(EXPORT_OBJS_DIR)%.o: %.cpp
	g++  $(CPP_FLAGS) -c -o $@ $+

ifneq ($(strip $(CPP_TAGS_TO_BUILD)),)
#rebuild the tags file if anything has changed
$(CPP_TAGS_TO_BUILD): $(subst $(CPP_TAGS_TO_BUILD),,$(BUILD_DEPS))
	$(CTAGS) $(CPP_TAGS_FLAGS) -f $(CPP_TAGS_TO_BUILD) $(PWD)
endif

usage:
	@echo "Set the base directory: export LINKER_DIR=<location of makefile.include>"
	@echo "To add extra flags to g++: export CPP_FLAGS=<flags>"
	@echo "To disable debug symbols: export DEBUG_ON=FALSE"
